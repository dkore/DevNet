import osimport csvimport jsonimport argparsefrom channel import channelfrom pprint import pprintCSV_CONFIG_HEADERS=['switch','vlanid','ipaddress','mac','interface']CSV_SWITCH_HEADERS=['switch','hostname','port','username','password']def get_cmdline_arguements():    parser = argparse.ArgumentParser('Network Subnet Modification Utility')    parser.add_argument("-c","--config-file",help="CSV with configurations",required=True)    parser.add_argument("-s", "--switch-file", help="CSV with Switch Details",required=True)    args=parser.parse_args()    return argsdef import_file(filename,headers):    if os.path.exists(filename):        config_data={}        try:            with open(filename,encoding='utf-8-sig') as csvfile:                content=csv.reader(csvfile)                for row in content:                    config_data_line={}                    if row==headers:                        continue                    for key,value in zip(headers,row):                        config_data_line[key]=value                    if config_data_line[headers[0]] in config_data.keys():                        config_data[config_data_line[headers[0]]].append(config_data_line)                    else:                        config_data[config_data_line[headers[0]]]=[config_data_line]            print(f'Imported file successfully {filename}')            return config_data        except csv.Error as csvError:            print(f'error occurred during import file {csvError}')    else:        print(f'unable to find/access {filename}')if __name__=="__main__":    args=get_cmdline_arguements()    conf_data=import_file(args.config_file,CSV_CONFIG_HEADERS)    switch_data=import_file(args.switch_file,CSV_SWITCH_HEADERS)    for switch in switch_data.keys():        details=switch_data[switch]        chosen=details[-1]        print(f'\nConnecting to switch {switch} - ({chosen})')        con=channel(address=chosen[CSV_SWITCH_HEADERS[1]],                    port=chosen[CSV_SWITCH_HEADERS[2]],                    username=chosen[CSV_SWITCH_HEADERS[3]],                    password=chosen[CSV_SWITCH_HEADERS[4]])        print('\nApplying Configurations ...')        for conf in conf_data.keys():            if switch==conf:                conf_details=conf_data[conf]                for detail in conf_details:                    vlan_id=detail[CSV_CONFIG_HEADERS[1]]                    ip_address = detail[CSV_CONFIG_HEADERS[2]]                    mac = detail[CSV_CONFIG_HEADERS[3]]                    interface = detail[CSV_CONFIG_HEADERS[4]]                    command=f'device-tracking binding vlan {vlan_id} {ip_address} interface {interface} {mac}'                    if con.chan :                        response=con.sendCommand(command)                        print(command)                        print(response)                    else:                        print('connection is closed')        con.closeSession()